name: Deploy Client to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./client/package-lock.json"

      - name: Install dependencies
        run: |
          cd ./client
          npm install --legacy-peer-deps

      - name: Create environments
        run: |
          cd ./client
          touch ./.env.prod
          echo "${{ secrets.CLIENT_PROD }}" > ./.env.prod
        shell: bash

      - name: Build client
        run: |
          cd ./client
          npm run build:prod

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/taleswiki-client:${{ github.sha }}

      - name: Copy files to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_SSH_USER }}
          key: ${{ secrets.EC2_SSH_PASSWORD }}
          source: "client/compose.yml"
          target: "/home/taleswiki"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_SSH_USER }}
          key: ${{ secrets.EC2_SSH_PASSWORD }}
          script: |
            cd /home/taleswiki/client
            export GITHUB_SHA=${{ github.sha }}
            docker compose down || true
            docker compose up -d || exit 1
            docker image prune -f
